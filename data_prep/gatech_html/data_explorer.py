import json
import os
import sys
from pathlib import Path
from bs4 import BeautifulSoup, Comment, XMLParsedAsHTMLWarning
import re
from urllib.parse import urljoin, urlparse
import warnings

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

project_root = Path(__file__).parent.parent.parent

gatech_meta_path = project_root / "scraper" / "gatech_crawl" / "gatech_meta.jsonl"
posts_gatech_path = project_root / "scraper" / "reddit" / "posts_gatech.jsonl"
html_path = project_root / "scraper" / "gatech_crawl" / "html"

warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)


BAD_HREF = re.compile(
    r"^\s*$|"            # empty
    r"\s|"               # contains spaces
    r"^(#|mailto:|javascript:)",  # fragments & JS links
    re.I
)

BOILERPLATE = [
    "Offices and Departments", "News Center", "Campus Calendar", "Special Events",
    "GreenBuzz", "Institute Communications", "Campus Visits", "Directions to Campus",
    "Visitor Parking Information", "GT visitor Wireless Network Information",
    "Georgia Tech Global Learning Center", "Georgia Tech Hotel and Conference Center",
    "Barnes and Noble at Georgia Tech", "Ferst Center for the Arts",
    "Robert C. Williams Paper Museum", "College of Computing", "College of Design",
    "College of Engineering", "College of Lifetime Learning", "College of Sciences",
    "Ivan Allen College of Liberal Arts", "Scheller College of Business",
    "Georgia Tech-Europe", "Georgia Tech-Shenzhen", "Georgia Tech Online",
    "Professional Education", "The Language Institute", "Global Engagement",
    "Research at Georgia Tech", "Georgia Tech Research Institute", "Commercialization",
    "Enterprise Innovation Institute", "Corporate Engagement", "Apply", "BuzzPort",
    "Buzzcard", "Career Center", "Commencement", "Graduate and Postdoctoral Education",
    "Undergraduate Education", "Library", "Student Life", "Student Entrepreneurship",
    "Education Abroad", "Canvas", "Parent and Family Programs",
    "Division of Student Life", "Scholarships and Financial Aid",
    "Administration and Finance", "Advising and Teaching", "Faculty Affairs",
    "Faculty Hiring", "Postdoctoral Services", "Human Resources", "Staff Council",
    "TechWorks", "Alumni Association", "Alumni Career Services", "Foundation",
    "Giving Back to Tech", "Startup Companies", "Economic Development",
    "Industry Engagement", "Institute Relations", "Professional Education",
    "Georgia Institute of Technology", "North Avenue", "Atlanta, GA 30332",
    "+1 404.894.2000", "Campus Map", "Directory", "Employment",
    "Emergency Information", "Equal Opportunity, Nondiscrimination, and Anti-Harassment Policy",
    "Legal & Privacy Information", "Human Trafficking Notice",
    "Title IX/Sexual Misconduct", "Hazing Public Disclosures", "Accessibility",
    "Accountability", "Accreditation", "Report Free Speech and Censorship Concern",
    "Georgia Tech", "2025 Georgia Institute of Technology"
]
boilerplate = set([word.lower() for word in BOILERPLATE])

def load_reddit_data():
    posts_data = []
    with open(posts_gatech_path, 'r') as f:
        for line in f:
            posts_data.append(json.loads(line.strip()))
    return posts_data

def load_gatech_data():
    gatech_meta_data = []
    with open(gatech_meta_path, 'r') as f:
        for line in f:
            gatech_meta_data.append(json.loads(line.strip()))

    return gatech_meta_data

def find_all_extensions(meta_data):
    counts = {}
    for record in meta_data:
        sha = record.get('sha')
        if '.' in sha[-5:]:
            extension = sha[-5:].split('.')[-1]
            counts[extension] = counts.get(extension, 0) + 1
    return counts

def remove_extensions(meta_data):
    new_meta_data = []
    keep_ext = ['html','htm']
    for record in meta_data:
        sha = record.get('sha')
        if '.' in sha[-5:]:
            extension = sha[-5:].split('.')[-1]
            if extension in keep_ext:
                new_meta_data.append(record)
        else:
            new_meta_data.append(record)
    return new_meta_data
            
def remove_short_pages(meta_data, html_dir, min_words=100, boilerplate=boilerplate):

    def extract_visible_text(html):
        soup = BeautifulSoup(html, "lxml")

        for sel in ["header", "footer", "nav", "aside", ".gt-menu", ".gt-footer", ".site-header", ".site-footer"]:
            for node in soup.select(sel):
                node.decompose()

        for tag in soup(["script", "style", "noscript", "meta", "link"]):
            tag.decompose()

        for c in soup.find_all(string=lambda t: isinstance(t, Comment)):
            c.extract()

        text = soup.get_text(" ", strip=True)
    
        # Remove template debugging strings
        text = re.sub(r'THEME OUTPUT|DEBUG|HOOK:|BEGIN|END|SUGGESTIONS:|FILE NAME', ' ', text)
        # Remove file paths and template references
        text = re.sub(r"'[^']*\.html\.twig'", ' ', text)
        text = re.sub(r"'[^']*templates[^']*'", ' ', text)
        # Remove HTML tags that might have survived
        text = re.sub(r'<[^>]*>', ' ', text)
        # Remove special characters and collapse whitespace
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    kept = []
    word_counts = {}
    idxs = []
    for i, record in enumerate(meta_data):
        # print progress every 500
        if i % 500 == 0:
            print(f"Checking length for {i}/{len(meta_data)}")

        sha = record.get("sha")
        if not sha:
            continue

        fp = html_dir / f"{sha}.html"
        if not fp.exists():
            continue

        try:
            html = fp.read_text(encoding="utf-8", errors="replace")
            # extract and clean text
            text = extract_visible_text(html)
            # remove boilerplate phrases
            for phrase in boilerplate:
                text = text.replace(phrase, " ")
            
            # Split into words and filter
            words = [w.lower() for w in text.split() if w and len(w) > 1]
            
            if len(words) >= min_words:
                kept.append(record)
                idxs.append(i)
            # Only count words for documents we're keeping
            if len(words) >= min_words:
                for word in words:
                    if not word.isdigit() and not (word.startswith("'") or word.endswith("'")):
                        word_counts[word] = word_counts.get(word, 0) + 1
                        
        except Exception as e:
            print(f"Error reading {fp}: {e}")

    print(f"Kept {len(kept)}/{len(meta_data)} documents after filtering")
    #print("Top 100 words by frequency:")
    #print(sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:100])
    return kept, idxs

def remove_all_wp_pages(meta_data):
    new_meta_data = []
    for record in meta_data:
        if 'wp-' not in record.get('sha'):
            new_meta_data.append(record)
    return new_meta_data

def count_links_distribution(meta_data, html_dir):
    link_distribution = {}
    
    for i, record in enumerate(meta_data):
        # Print progress every 500 files
        if i % 500 == 0:
            print(f"Processing file {i}/{len(meta_data)}")
            
        sha = record.get("sha")
        if not sha:
            continue
            
        fp = html_dir / f"{sha}.html"
        if not fp.exists():
            continue
            
        try:
            # Read and parse the HTML
            html = fp.read_text(encoding="utf-8", errors="replace")
            soup = BeautifulSoup(html, "lxml")
            
            # Count all links (a tags)
            links = soup.find_all('a')
            link_count = len(links)
            
            # Update distribution dictionary
            link_distribution[link_count] = link_distribution.get(link_count, 0) + 1
                
        except Exception as e:
            print(f"Error processing {fp}: {e}")
    
    # Sort the dictionary by key for easier reading
    sorted_distribution = dict(sorted(link_distribution.items()))
    
    print(f"Processed {len(meta_data)} files")
    print(f"Found files with between {min(sorted_distribution.keys())} and {max(sorted_distribution.keys())} links")
    
    return sorted_distribution

STOP_HREF_PREFIX = ("#", "mailto:", "javascript")

def extract_visible_text(node):
    """Return visible text in `node`, minus comments / scripts / nav junk."""
    for thrash in node(["script", "style", "noscript"]):
        thrash.decompose()
    for c in node.find_all(string=lambda t: isinstance(t, Comment)):
        c.extract()
    return node.get_text(" ", strip=True)

def clean_anchor_text(text):
    """Collapse whitespace, drop very long anchors (>8 words)."""
    text = re.sub(r"\s+", " ", text).strip()
    if 1 <= len(text.split()) <= 8:
        return text
    return None                     # skip gigantic menu items

def get_context(anchor, window=40):
    """
    Grab `window` tokens before+after the anchor inside its parent element.
    Very lightweight but yields surprisingly good context.
    """
    parent_text = extract_visible_text(anchor.parent)
    # highlight anchor text with sentinel
    marker = "<<<ANCHOR>>>"
    parent_text = parent_text.replace(anchor.get_text(strip=True), f" {marker} ")
    toks = parent_text.split()
    try:
        idx = toks.index(marker)
    except ValueError:
        return None
    lo = max(0, idx - window)
    hi = min(len(toks), idx + window + 1)
    # remove marker, collapse
    context = " ".join([t for t in toks[lo:hi] if t != marker])
    return context

def is_valid_href(href: str) -> bool:
    """Reject placeholders, JS, mailto, whitespace, etc."""
    if BAD_HREF.search(href):
        return False
    # reject obvious placeholders like "link_to_be_added" or "tbd"
    if "to be added" in href.lower() or "tbd" in href.lower():
        return False
    return True

def make_triplets(meta_data, html_dir: Path, out_path: Path):
    out = out_path.open("w")
    total_links = kept_links = 0

    for i, rec in enumerate(meta_data):
        if i % 500 == 0:
            print(f"Parsing anchors {i}/{len(meta_data)} …")

        sha, url_base = rec.get("sha"), rec.get("url")
        if not sha or not url_base:
            continue
        fp = html_dir / f"{sha}.html"
        if not fp.exists():
            continue

        soup = BeautifulSoup(fp.read_text(errors="replace"), "lxml")

        for a in soup.find_all("a", href=True):
            total_links += 1
            href = a["href"].strip()
            if not is_valid_href(href):
                continue

            try:
                target_url = urljoin(url_base, href)
            except ValueError:
                continue                       # malformed – skip

            anchor_txt = clean_anchor_text(a.get_text(" ", strip=True))
            if not anchor_txt:
                continue

            context = get_context(a)
            if not context:
                continue

            kept_links += 1
            out.write(json.dumps({
                'sha':sha,
                "anchor":  anchor_txt,
                "context": context,
                "url":     target_url
            }) + "\n")

    out.close()
    print(f"✔ wrote {kept_links:,} triples (out of {total_links:,} <a> tags) → {out_path}")

# Usage example
meta_data = load_gatech_data()
posts_data = load_reddit_data()
#print(find_average_length(meta_data, posts_data))
#print(find_average_links(meta_data, posts_data))
#print(len(remove_extensions(meta_data)))
#print(len(remove_all_wp_pages(meta_data)))
'''
- no pdfs (1128) - DONE
- no images or media - DONE
- no <100 words pages (after cleanup)
- no login, signup, logout
'''
#print(find_docs_with_low_length(meta_data, posts_data))
#meta_data = remove_extensions(meta_data)
#meta_data = remove_all_wp_pages(meta_data)
#meta_data, idxs = remove_short_pages(meta_data, html_path, min_words=150)

#print(idxs)

#with open("idx.txt", "w") as f:
#    for idx in idxs:
#        f.write(f"{idx}\n")

idxs = [


meta_data = [meta_data[i] for i in idxs]

make_triplets(meta_data, html_path, Path("triples_gatech.jsonl"))